{
  pkgs ? import <nixpkgs> { }
}:

with pkgs;

# no!
/*
/build/pyside-setup-everywhere-src-6.9.1/sources/pyside6/build/PySide6/QtCore/PySide6/QtCore/qabstractanimation_wrapper.cpp: In function 'PyTypeObject* init_QAbstractAnimation(PyObject*)':
/build/pyside-setup-everywhere-src-6.9.1/sources/pyside6/build/PySide6/QtCore/PySide6/QtCore/qabstractanimation_wrapper.cpp:1471:40: error: cannot convert 'const QMetaObject*' to 'PyObject*' {aka '_object*'}
 1471 |     PySide::initQObjectSubType(pyType, &::QAbstractAnimation::staticMetaObject);
      |                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      |                                        |
      |                                        const QMetaObject*
In file included from /build/pyside-setup-everywhere-src-6.9.1/sources/pyside6/build/PySide6/QtCore/PySide6/QtCore/qabstractanimation_wrapper.cpp:20:
/build/pyside-setup-everywhere-src-6.9.1/sources/pyside6/libpyside/pysideqobject.h:32:66: note:   initializing argument 2 of 'void PySide::initQObjectSubType(PyTypeObject*, PyObject*, PyObject*)'
   32 | PYSIDE_API void initQObjectSubType(PyTypeObject *type, PyObject *args, PyObject *kwds);
      |                                                        ~~~~~~~~~~^~~~
*/
# workaround:
# ktexteditor_view_wrapper.cpp:2896:13: error: no member named 'Signal' in namespace 'PySide'
#  2896 |     PySide::Signal::registerSignals(pyType, &::KTextEditor::View::staticMetaObject);
#       |     ~~~~~~~~^
# this broken code was generated by shiboken6-6.9.1
# https://code.qt.io/cgit/pyside/pyside-setup.git/tree/sources/shiboken6/generator/shiboken/cppgenerator.cpp#n5648
# which seems to be old shiboken2 code:
#     s << "PySide::Signal::registerSignals(pyType, &" << m_gsp
#        << metaClass->qualifiedCppName() << "::staticMetaObject);\n";
/*
// Old:
s << "PySide::Signal::registerSignals(pyType, &" << m_gsp
   << metaClass->qualifiedCppName() << "::staticMetaObject);\n";

// New (PySide6 >=6.7):
s << "Shiboken::initQObjectSubType(pyType, &" << m_gsp
   << metaClass->qualifiedCppName() << "::staticMetaObject, \"" << metaClass->qualifiedCppName() << "\");\n";
*/
let
  /*
  shiboken6_patched = python3.pkgs.shiboken6.overrideAttrs (oldAttrs: {
    postPatch = (oldAttrs.postPatch or "") + ''
      substituteInPlace generator/shiboken/cppgenerator.cpp \
        --replace \
          "PySide::Signal::registerSignals" \
          "PySide::initQObjectSubType" \
        --replace \
          '<< metaClass->qualifiedCppName() << "::staticMetaObject);\\n";' \
          '<< metaClass->qualifiedCppName() << "::staticMetaObject, \\"" << metaClass->qualifiedCppName() << "\\");\n";'
    '';
  });
  pyside6_patched = python3.pkgs.pyside6.override {
    shiboken6 = shiboken6_patched;
  };
  */
  shiboken6_patched = python3.pkgs.shiboken6;
  pyside6_patched = python3.pkgs.pyside6;
in

# clangStdenv.mkDerivation {
stdenv.mkDerivation {
  pname = "ktexteditor-pyside6";
  version = "0.0.1";
  src = ./.;
  nativeBuildInputs = [
    cmake
    kdePackages.extra-cmake-modules # ECMGeneratePythonBindings.cmake
    (python3.withPackages (pp: with pp; [
      # shiboken6
      shiboken6_patched
      # pyside6
      pyside6_patched
      # fix: The 'build' Python module is needed for ECMGeneratePythonBindings
      build
    ]))
  ];
  buildInputs = [
    qt6.qtbase
    qt6.qtbase.dev
    kdePackages.ktexteditor
    glibc_multi # stdc-predef.h stdlib.h ...
  ];
  # debug
  /*
  preUnpack = ''
    echo kdePackages.extra-cmake-modules = ${kdePackages.extra-cmake-modules}
    echo python3.pkgs.shiboken6 = ${python3.pkgs.shiboken6}
    echo python3.pkgs.pyside6 = ${python3.pkgs.pyside6}
    # exit 1
  '';
  */
  # help cmake find ${kdePackages.extra-cmake-modules}/share/ECM/modules/ECMGeneratePythonBindings.cmake
  cmakeFlags = [
    "-DCMAKE_MODULE_PATH=${kdePackages.extra-cmake-modules}/share/ECM/modules"
    # "-DKDE_EXTRA_CMAKE_MODULES=${kdePackages.extra-cmake-modules}/share/ECM/modules"
  ];
  dontWrapQtApps = true;
  # enableParallelBuilding = false; # debug
  # preBuild = "set -x"; # debug
  # makeFlags = [ "-d" ]; # debug
  # debug: what env-vars contain C++ include paths
  /*
  buildCommand = ''
    env | grep -- -iconv- | while read -r line; do
      parts=($(echo "$line" | tr '[:=]' ' '))
      key=''${parts[0]}
      for val in ''${parts[@]}; do
        if echo "$val" | grep -q -- -iconv-; then
          echo "$key $val"
        fi
      done
    done
    exit 1
  '';
  */
}
